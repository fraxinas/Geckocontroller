esphome:
  name: geckoconsole
  platform: ESP32
  board: nodemcu-32s
  # includes:
  #   - custom_components/vcnl4040/vcnl4040.h
  # libraries:
  #  - "Adafruit BusIO@^1.11.1"
  #  - "Adafruit VCNL4040@^1.0.1"
  on_boot:
    priority: 250
    then:
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - light.turn_on:
          id: rgb_leds
          red: 28%
          green: 28%
          blue: 28%
      - binary_sensor.template.publish:
          id: api_connected
          state: OFF
      - wait_until:
          api.connected
      - binary_sensor.template.publish:
          id: api_connected
          state: ON
  includes:
    - custom_components/gecko_console.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geckocontrol Fallback Hotspot"
    password: !secret fallback_password

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: mhz19_calibrate_zero
      then:
        - mhz19.calibrate_zero: co2_sensor

ota:

substitutions:
  menuSize: '7'

globals:
# Wait indicator
   - id: wi
     type: unsigned char
     initial_value: '0'

# Blank screen
   - id: s_blank
     type: bool
     initial_value: 'false'

# Menu helpers
   - id: menu_current_node
     type: unsigned char
     initial_value: '0'

   - id: menu_current_label
     type: char *

   - id: menu_current_value
     type: float

   - id: menu_current_percentage
     type: float

   - id: menu_target_value
     type: float

   - id: menu_weather_value
     type: float

   - id: menu_no_hass_updates
     type: bool
     initial_value: 'false'

     # subpage_t
   - id: menu_subpage
     type: unsigned char
     initial_value: '0'

   - id: menu_labels
     type: char * [${menuSize}]
     initial_value: '{"Overview","Thermostat","Hygrostat","CO2 LEDs","Scenic Light","Fogger","Rain"}'

   - id: menu_units
     type: char * [${menuSize}]
     initial_value: '{"","°C","%","","HSV","\U0000F67E","\U0000F683"}'

    # function_t
   - id: menu_functions
     type: unsigned char[${menuSize}]
     initial_value: '{0,FUNC_CLIMATE,FUNC_CLIMATE,FUNC_SLIDER,FUNC_COLORPICKER,FUNC_BUTTON,FUNC_BUTTON}'

     # The range maximum value
   - id: menu_rotary_ticks
     type: int [${menuSize}]
     initial_value: '{4,0,50,50,COLORPICKER_V_TICKS,1,1}'

   - id: menu_increment
     type: float [${menuSize}]
     initial_value: '{0,0.5,2.,2.,5.12,0,0}'

   - id: thermostat_diff
     type: float

   - id: hygrostat_diff
     type: float

script:
# What value to display for each menu item
  - id: menu_maxvals
    then:
      - lambda: |-
          id(menu_rotary_ticks)[1] = round((id(thermostat_max_temperature).state-id(thermostat_min_temperature).state)/id(menu_increment)[1]);
          id(menu_rotary_ticks)[2] = round((id(hygrostat_max_humidity).state-id(hygrostat_min_humidity).state)/id(menu_increment)[2]);

  - id: menu_values
    then:
      - lambda: |-
          switch(id(menu_current_node)) {
            case 1:
              id(menu_current_value) = id(thermostat_current_temperature).state;
              id(menu_target_value) = id(thermostat_target_temperature).state;
              id(menu_weather_value) = id(weather_temperature).state;
              id(menu_current_percentage) = (id(menu_target_value) - id(thermostat_min_temperature).state) / (id(thermostat_max_temperature).state - id(thermostat_min_temperature).state);
              ESP_LOGV(TAG, "read temperatures current: %.2f°C, target: %.2f°C (ticks=%d) weather: %.2f°C, percentage: %.2f%%", id(menu_current_value), id(menu_target_value), id(menu_rotary_ticks)[1], id(menu_weather_value), id(menu_current_percentage)*100.);
              break;
            case 2:
              id(menu_current_value) = id(hygrostat_current_humidity).state;
              id(menu_target_value) = id(hygrostat_target_humidity).state;
              id(menu_weather_value) = id(weather_humidity).state;
              id(menu_current_percentage) = (id(menu_target_value) - id(hygrostat_min_humidity).state) / (id(hygrostat_max_humidity).state - id(hygrostat_min_humidity).state);
              ESP_LOGV(TAG, "read humidity current: %.0f, target: %.0f (ticks=%d) weather: %.0f, percentage: %.2f%%", id(menu_current_value), id(menu_target_value), id(menu_rotary_ticks)[2], id(menu_weather_value), id(menu_current_percentage)*100.);
              break;
            case 3:
              float b;
              id(rgb_leds).current_values_as_brightness(&b);
              id(menu_current_value) = b*100.f;
              id(menu_current_percentage) = b;
              ESP_LOGV(TAG, "read brightness: %f -> menu_current_value: %.2f / percentage: %.2f", b, id(menu_current_value), id(menu_current_percentage));
              break;
          }

# What value to set rotary encoder to for each menu item setting
  - id: menu_set_rotary
    then:
      - lambda: |-
          int rot_val = 0;
          if (id(menu_functions)[id(menu_current_node)] == FUNC_COLORPICKER) // colorpicker
          {
            int h;
            float s, v;
            Color c = id(color_scenic_light);
            rgb_to_hsv(c.r, c.g, c.b, h, s, v);
            switch (id(menu_subpage)) {
              case PAGE_VIEW: // browse menu
                return;
              case PAGE_SET: // set brightness
                rot_val = round(v / COLORPICKER_V_MAX * COLORPICKER_V_TICKS);
                ESP_LOGD(TAG, "menu_set_rotary colorpicker brightness v=%.2f => %d", v, rot_val);
                break;
              case PAGE_SET_HUE: // set hue
                rot_val = round(h / COLORPICKER_H_MAX * COLORPICKER_H_TICKS);
                ESP_LOGD(TAG, "menu_set_rotary colorpicker hue=%d => %d", h, rot_val);
                break;
              case PAGE_SET_SATURATION: // set saturation
                s *= 100.;
                rot_val = round(s / COLORPICKER_S_MAX * COLORPICKER_S_TICKS);
                ESP_LOGD(TAG, "menu_set_rotary colorpicker saturation=%.2f => %d", s, rot_val);
                break;
            }
            id(rotary_dial).set_value(rot_val);
          } else {
            rot_val = round(id(menu_current_percentage) * id(menu_rotary_ticks)[id(menu_current_node)]);
            ESP_LOGV(TAG, "menu_set_rotary current_percentage=%.2f%% * ticks[%d]=%d = %d", id(menu_current_percentage)*100., id(menu_current_node), id(menu_rotary_ticks)[id(menu_current_node)], rot_val);
            id(rotary_dial).set_value(rot_val);
          }
      - script.execute: menu_hass_updates_timeout

# Actions for each menu item setting
  - id: menu_actions
    then:
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 1;'
          then:
            homeassistant.service:
              service: climate.set_temperature
              variables:
                x: |-
                  double rot_val = id(rotary_dial).state;
                  double set_val = id(menu_increment)[1] * rot_val + id(thermostat_min_temperature).state;
                  ESP_LOGD(TAG, "rotary val=%.2f -> change temp setpoint to %.2f°C", rot_val, set_val);
                  id(thermostat_target_temperature).state = set_val;
                  return set_val;
              data_template:
                entity_id: climate.thermostat_air
                temperature: '{{ x }}'
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 2;'
          then:
            homeassistant.service:
              service: climate.set_temperature
              variables:
                x: |-
                  double rot_val = id(rotary_dial).state;
                  double set_val = id(menu_increment)[2] * rot_val + id(hygrostat_min_humidity).state;
                  ESP_LOGD(TAG, "rotary val=%.2f -> change hygro setpoint to %.0f%%", rot_val, set_val);
                  id(hygrostat_target_humidity).state = set_val;
                  return set_val;
              data_template:
                entity_id: climate.hygrostat
                temperature: '{{ x }}'
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 3;'
          then:
            - lambda: |-
                auto call = id(rgb_leds).make_call();
                float b = id(rotary_dial).state;
                ESP_LOGD(TAG, "change brightness to %.2f", b);
                if (b > 0.)
                  call = id(rgb_leds).turn_on();
                call.set_brightness(b/id(menu_rotary_ticks)[id(menu_current_node)]);
                call.perform();
      - if:
          condition:
            lambda: 'return (id(menu_functions)[id(menu_current_node)] == FUNC_COLORPICKER);'
          then:
            - if:
                condition:
                  lambda: 'return (id(menu_subpage) == PAGE_SET);'
                then:
                  homeassistant.service:
                    service: light.turn_on
                    variables:
                      b: |-
                        float b = id(rotary_dial).state * COLORPICKER_V_MAX / COLORPICKER_V_TICKS;
                        ESP_LOGD(TAG, "menu_actions colorpicker send brightness=%.0f", b);
                        UpdateBrightnessToEsphomeColor(b, &id(color_scenic_light));
                        return b;
                    data_template:
                      entity_id: light.scenic_light
                      brightness: '{{ b }}'
            - if:
                condition:
                  lambda: 'return (id(menu_subpage) >= PAGE_SET_HUE);'
                then:
                  homeassistant.service:
                    service: light.turn_on
                    variables:
                      hs_color_text: |-
                        return HSColorFromRotary(id(rotary_dial).state, id(menu_subpage), &id(color_scenic_light));
                    data_template:
                      entity_id: light.scenic_light
                      hs_color: '{{ hs_color_text }}'
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 5;'
          then:
            homeassistant.service:
              service: button.press
              data:
                entity_id: button.sleepy_hollow
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 6;'
          then:
            homeassistant.service:
              service: button.press
              data:
                entity_id: button.let_it_rain

  - id: thermostat_hass_update
    then:
      - if:
          condition:
            lambda: 'return id(menu_no_hass_updates) == false;'
          then:
            - script.execute: menu_values
            - script.execute: menu_set_rotary
            - lambda: |-
                float diff = id(thermostat_current_temperature).state-id(thermostat_target_temperature).state;
                int r = round(clamp(+85.f*diff, 0.f, 255.f));
                int g = round(clamp(255-28.f*diff*diff, 0.f, 255.f));
                int b = round(clamp(-85.f*diff, 0.f, 255.f));
                id(color_thermostat) = Color(r, g, b);
                id(thermostat_diff) = diff;

  - id: hygrostat_hass_update
    then:
      - if:
          condition:
            lambda: 'return id(menu_no_hass_updates) == false;'
          then:
            - script.execute: menu_values
            - script.execute: menu_set_rotary
            - lambda: |-
                float diff = id(hygrostat_current_humidity).state-id(hygrostat_target_humidity).state;
                int r = round(clamp(-36.4f*diff, 0.f, 255.f));
                int g = round(clamp(255-5.2f*diff*diff, 0.f, 255.f));
                int b = round(clamp(+36.4f*diff, 0.f, 255.f));
                id(color_hygrostat) = Color(r, g, b);
                id(hygrostat_diff) = diff;

  - id: overview_timeout
    mode: restart
    then:
      - delay: 1min
      - lambda: >-
          id(menu_current_node) = 0;
          id(menu_subpage) = PAGE_VIEW;
          id(rotary_dial).set_value(0);

  - id: menu_hass_updates_timeout
    mode: restart
    then:
      - delay: 1s
      - lambda: >-
          id(menu_no_hass_updates) = false;

  - id: co2_warning_action
    then:
      - if:
          condition:
            lambda: 'return (id(api_connected).state);'
          then:
            - lambda: |-
                id(gecko_display).set_update_interval(5000);
                id(rtttlplayer).play("GoodBad:d=4,o=5,b=56:32p,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,d#,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,c#6,32a#,32d#6,32a#,32d#6,8a#.,16f#.,32f.,32d#.,c#,32a#,32d#6,32a#,32d#6,8a#.,16g#.,d#,1p,1p,1p,1p,1p,1p");
            - delay: 15s
            - lambda: 'id(gecko_display).set_update_interval(500);'
            - delay: 45s

time:
  - platform: homeassistant
    id: ha_time

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

uart:
  rx_pin: GPIO15
  tx_pin: GPIO13
  baud_rate: 9600

i2c:
  sda: 25
  scl: 26
  scan: True
  id: bus_a

binary_sensor:
  - platform: gpio
    id: rotary_dial_push
    name: "Rotary Button"
    pin:
      number: GPIO16
      inverted: true
    internal: true
    on_press:
      then:
        - if:
            condition:
              api.connected
            then:
              - if:
                  condition:
                    # Set mode for continuous or binary setting
                    lambda: |-
                        return (id(menu_functions)[id(menu_current_node)] != FUNC_OVERVIEW &&
                                id(menu_functions)[id(menu_current_node)] != FUNC_BUTTON);
                  then:
                    - lambda: |-
                        //toggle subpage
                        switch (id(menu_subpage)) {
                          case 0:
                            id(menu_subpage) = PAGE_SET;
                            break;
                          case 1: {
                            if (id(menu_functions)[id(menu_current_node)] == FUNC_COLORPICKER) {
                              id(menu_subpage) = PAGE_SET_HUE;
                              break;
                            }
                            id(menu_subpage) = PAGE_VIEW;
                            break;
                          }
                          case 2:
                          case 4:
                            id(menu_subpage) = PAGE_VIEW;
                            break;
                          case 3:
                            id(menu_subpage) = PAGE_SET_SATURATION;
                            break;
                        }

              - if:
                  condition:
                    # Button action
                    lambda: 'return id(menu_functions)[id(menu_current_node)] == FUNC_BUTTON;'
                  then:
                     - script.execute: menu_actions

              # If set mode, set rotary
              - if:
                  condition:
                    lambda: 'return (id(menu_subpage) >= PAGE_SET);'
                  then:
                    - lambda: 'id(menu_no_hass_updates) = true;'
                    - script.execute: menu_set_rotary

              # Display entities value for each menu item
              - script.execute: menu_values
              - script.execute: overview_timeout

  - platform: gpio
    id: button_2
    pin:
      number: GPIO34
      inverted: true
    internal: true
    on_press:
      then:
        - lambda: |-
            switch (id(menu_subpage)) {
              case PAGE_VIEW:
              case PAGE_SET: {
                if (id(menu_functions)[id(menu_current_node)] == FUNC_COLORPICKER)
                  id(menu_subpage) = PAGE_VIEW;
                else
                  id(menu_subpage) = PAGE_GRAPH;
                break;
              }
              case PAGE_GRAPH:
                id(menu_subpage) = PAGE_VIEW;
                id(menu_current_node) = 0;
                //reset rotary to 0
                id(rotary_dial).set_value(0);
                break;
              case PAGE_SET_HUE:
                id(menu_subpage) = PAGE_SET;
                break;
              case PAGE_SET_SATURATION:
                id(menu_subpage)--;
                break;
            }
        - script.execute: menu_set_rotary
        - script.execute: overview_timeout

  - platform: template
    id: api_connected

sensor:
  - platform: rotary_encoder
    id: rotary_dial
    name: "Rotary Encoder"
    pin_a: GPIO17
    pin_b: GPIO05
    filters:
      - lambda: |-
          int maxval = 0;
          if(id(menu_subpage) == PAGE_SET) { //if set mode, rotary should go from 0 to according setting
            switch(id(menu_functions)[id(menu_current_node)]){
              case FUNC_SLIDER:
              case FUNC_CLIMATE:
              case FUNC_COLORPICKER:
                maxval = id(menu_rotary_ticks)[id(menu_current_node)] + 1; break; // continuous
              case FUNC_SWITCH: maxval = 2; break;  // binary
            }
          } else if (id(menu_subpage) == PAGE_SET_HUE) { // colorpicker set hue, work endlessly
            maxval = id(menu_rotary_ticks)[id(menu_current_node)];
            float res = x;
            if (x > maxval)
              res = std::fmod(x, maxval);
            else if (x < 0)
              res = maxval-std::fmod(-1.*x, maxval);
            ESP_LOGD(TAG, "color picker rotary x=%f maxval=%d res=%f", x, maxval, res);
            return res;
          } else if (id(menu_subpage) == PAGE_SET_SATURATION) { // colorpicker set saturation
            maxval = COLORPICKER_S_TICKS + 1;
          }
          ESP_LOGD(TAG, "rotary x=%f maxval=%d", x, maxval);
          //if rotary is over length, set to length
          if(maxval && x >= maxval) {
            id(rotary_dial).set_value(maxval-1);
            return maxval-1;
          } else if (x < 0) {
            id(rotary_dial).set_value(0);
            return 0;
          }
          return x;
    resolution: 1
    min_value: -48
    internal: true
    on_clockwise:
      then:
        - if:
            condition:
              lambda: 'return (id(menu_subpage) == PAGE_VIEW);'
            then:
              - lambda: |-
                  if (id(menu_current_node) < ${menuSize}-1)
                    id(menu_current_node)++;
                  else
                    id(menu_current_node) = 0;
    on_anticlockwise:
      then:
        - if:
            condition:
              lambda: 'return (id(menu_subpage) == PAGE_VIEW);'
            then:
              - lambda: |-
                  if (id(menu_current_node) >= 1)
                    id(menu_current_node)--;
                  else
                    id(menu_current_node) = ${menuSize}-1;
    on_value:
      then:
        - if:
            condition:
              api.connected
            then:
              - if:
                  # Modify values
                  condition:
                    lambda: 'return (id(menu_subpage) >= PAGE_SET);'
                  then:
                    - lambda: 'id(menu_no_hass_updates) = true;'
                    - script.execute: menu_actions
                # Update value
              - script.execute: menu_values
              - script.execute: overview_timeout

  - platform: wifi_signal
    id: wifisignal
    update_interval: 20s

  - platform: template
    id: wifistep
    update_interval: 20s
    lambda: |-
      if(isnan(id(wifisignal).state)) return 0;
      else return round((id(wifisignal).state+100)/10);

  - platform: mhz19
    id: co2_sensor
    co2:
      name: "MH-Z19 CO2 Value"
      id: co2_val
      on_value:
        then:
          - lambda: |-
              if (!id(api_connected).state)
                return;
              auto call = id(rgb_leds).make_call();
              double r=0.0, g=0.0, b=0.0;
              g = clamp(1.6-0.001*x, 0., 1.);
              r = clamp(-0.5+0.001*x, 0., 1.);
              call.set_rgb(r,g,b);
              call.perform();
              id(color_co2) = Color(r*255., g*255., 0.);
              if (x > 1800) {
                id(co2_warning_action).execute();
              }
    temperature:
      name: "MH-Z19 Temperature"
      id: temp_val
    update_interval: 20s
    automatic_baseline_calibration: false

# Climate Controls from Home Assistant
  - platform: homeassistant
    id: thermostat_target_temperature
    entity_id: climate.thermostat_air
    attribute: temperature
    internal: true
    on_value:
      then:
        - script.execute: thermostat_hass_update
  - platform: homeassistant
    id: thermostat_current_temperature
    entity_id: climate.thermostat_air
    attribute: current_temperature
    internal: true
    on_value:
      then:
        - script.execute: thermostat_hass_update
  - platform: homeassistant
    id: thermostat_min_temperature
    entity_id: climate.thermostat_air
    attribute: min_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: thermostat_max_temperature
    entity_id: climate.thermostat_air
    attribute: max_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: ground_temperature
    entity_id: sensor.ground_temperature
    internal: true
  - platform: homeassistant
    id: weather_temperature
    entity_id: sensor.temperature_in_france_noumea_182_days_ago
    internal: true
    on_value:
      then:
        - script.execute: thermostat_hass_update
  - platform: homeassistant
    id: hygrostat_target_humidity
    entity_id: climate.hygrostat
    attribute: temperature
    internal: true
    on_value:
      then:
        - script.execute: hygrostat_hass_update
  - platform: homeassistant
    id: hygrostat_current_humidity
    entity_id: climate.hygrostat
    attribute: current_temperature
    internal: true
    on_value:
      then:
        - script.execute: hygrostat_hass_update
  - platform: homeassistant
    id: hygrostat_min_humidity
    entity_id: climate.hygrostat
    attribute: min_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: hygrostat_max_humidity
    entity_id: climate.hygrostat
    attribute: max_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: weather_humidity
    entity_id: sensor.humidity_in_france_noumea_182_days_ago
    internal: true
    on_value:
      then:
        - script.execute: thermostat_hass_update
  - platform: homeassistant
    id: ceiling_humidity
    entity_id: sensor.ceiling_humidity
    internal: true
  - platform: homeassistant
    id: ground_humidity
    entity_id: sensor.ground_humidity
    internal: true
  - platform: homeassistant
    id: scenic_light_b
    entity_id: light.scenic_light
    attribute: brightness
    internal: true
    on_value:
      then:
        - lambda: |-
            if (id(menu_no_hass_updates))
              return;
            UpdateBrightnessToEsphomeColor(id(scenic_light_b).state, &id(color_scenic_light));
            ESP_LOGD(TAG, "scenic_light brightness updated to %.2f. Color=%d %d %d", id(scenic_light_b).state, id(color_scenic_light).r, id(color_scenic_light).g, id(color_scenic_light).b);

text_sensor:
  - platform: homeassistant
    id: scenic_light_hs
    entity_id: light.scenic_light
    attribute: hs_color
    internal: true
    on_value:
      then:
        - lambda: |-
            if (id(menu_no_hass_updates))
              return;
            HassHSColorTextToEsphomeColor(id(scenic_light_hs).state, &id(color_scenic_light));
            ESP_LOGD(TAG, "scenic_light hs_color ('%s') updated. Color=%d %d %d", id(scenic_light_hs).state.c_str(), id(color_scenic_light).r, id(color_scenic_light).g, id(color_scenic_light).b);

# Climate Controls from Home Assistant

  # - platform: custom
  #   lambda: |-
  #     auto MyVCNL4040_sensor = new MyVCNL4040();
  #     App.register_component(MyVCNL4040_sensor);
  #     return {MyVCNL4040_sensor->prox_sensor, MyVCNL4040_sensor->lux_sensor, MyVCNL4040_sensor->rawLight_sensor};
  #   sensors:
  #   - name: "Proximity sensor"
  #   - name: "Lux sensor"
  #   - name: "Raw Light sensor"

output:
  - platform: ledc
    pin: GPIO04
    id: buzzer

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO33
    num_leds: 6
    rgb_order: GRB
    id: rgb_leds
    name: "RGB LEDs"
    default_transition_length: 0s
    color_correct: [50%, 50%, 50%]
    restore_mode: RESTORE_DEFAULT_ON
  # - platform: monochromatic
  #   output: buzzer
  #   name: "Buzzer"

rtttl:
  output: buzzer
  on_finished_playback:
    - logger.log: 'Song ended!'
  id: rtttlplayer

status_led:
  pin: GPIO02

interval:
  - interval: 60s
    then:
      - lambda: |-
          if (id(co2_sensor).status_has_warning()) {
            id(color_co2) = Color(64,64,64);
          }

font:
  - file: "/usr/share/fonts/TTF/OpenSans-Regular.ttf"
    id: big_font
    size: 40
    glyphs: ">-+:%°0123456789ACHSaonetigpms. "

  - file: "/usr/share/fonts/TTF/OpenSans-Light.ttf"
    id: small_font
    size: 26
    glyphs: ">-+:/%&!°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."

  - file: "/usr/share/fonts/TTF/OpenSans-Light.ttf"
    id: tiny_font
    size: 19
    glyphs: ":-+0123456789AGCHSonecktrlig.pma "

  - file: '../resources/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 40
    glyphs: [
      "\U0000F67E", # mdi-weather-fog
      "\U0000F683", # mdi-weather-rain
      ]

display:
  - platform: st7789v
    id: gecko_display
    dc_pin: GPIO22
    reset_pin: GPIO21
    backlight_pin: GPIO32
    cs_pin: GPIO02
    dimensions: 240x240
    update_interval: 0.5s
    rotation: 0
    lambda: |-
      if (!id(api_connected).state){
        // Header Background
        it.filled_rectangle(0, 0, 240, 16, color_dark_purple);
        it.printf(0, 6, id(tiny_font), COLOR_ON, TextAlign::CENTER_LEFT, "Connecting to HASS");
        it.image(22, 26, id(gecko_logo));
        // Little animation before API is online
        id(wi) = ++id(wi) > 16 ? 0 : id(wi);
        it.filled_rectangle(200, 4, 2*id(wi), 9);
        it.printf(120, 240, id(small_font), COLOR_ON, TextAlign::BASELINE_CENTER, "Geckocontrol V1.0");
      } else {
        // Header Background
        it.filled_rectangle(0, 0, 240, 16, color_dark_purple);
        // Header time
        it.strftime(0, 6, id(tiny_font), COLOR_ON, TextAlign::CENTER_LEFT, "%H:%M", id(ha_time).now());
        // Header CO2
        it.printf(200, 6, id(tiny_font), COLOR_ON, TextAlign::CENTER_RIGHT, "%.0fppm", id(co2_val).state);
        // Header wifi
        for(int i=0; i<5; i++) if(i<id(wifistep).state) it.filled_rectangle(216+i*5,8-i*2,4,i*2+4); else it.rectangle(216+i*5,8-i*2,4,i*2+4);
        // Header menu level
        // y-coord start of the menu pos display
        int b = 80 - (2 * ${menuSize});
        for(int i=0; i<${menuSize}; i++) {
          int itb = b + i*4;
          if(id(menu_current_node) == i)
            it.filled_rectangle(itb, 6, 6, 6);
          else
            it.filled_rectangle(itb+2, 8, 2, 2);
        };

        // Overview
        if(id(menu_current_node) == 0) {
          it.filled_rectangle(10, 60, 220, 54, id(color_thermostat));
          if (id(thermostat_current_temperature).has_state()) {
            it.printf(120, 60, id(big_font), COLOR_OFF, TextAlign::TOP_CENTER, "%.1f°C", id(thermostat_current_temperature).state);
            it.printf(224, 84, id(tiny_font), COLOR_OFF, TextAlign::TOP_RIGHT, "%+.1f", id(thermostat_diff));
          }
          it.filled_rectangle(10, 120, 220, 54, id(color_hygrostat));
          if (id(hygrostat_current_humidity).has_state()) {
            it.printf(120, 120, id(big_font), COLOR_OFF, TextAlign::TOP_CENTER, "%.0f%%", id(hygrostat_current_humidity).state);
            it.printf(220, 142, id(tiny_font), COLOR_OFF, TextAlign::TOP_RIGHT, "%+.0f", id(hygrostat_diff));
          }
          it.filled_rectangle(10, 180, 220, 54, id(color_co2));
          if (id(co2_val).has_state() && !id(co2_sensor).status_has_warning()) {
            it.printf(120, 180, id(big_font), COLOR_OFF, TextAlign::TOP_CENTER, "%.0fppm", id(co2_val).state);
          }
          return;
        }
        else if(id(menu_functions)[id(menu_current_node)] == FUNC_COLORPICKER) { // color_picker
          it.color_picker(30, 30, id(color_picker), id(color_scenic_light), id(menu_subpage));
          return;
        }

        // Show label
        bool s = (id(menu_subpage) == PAGE_VIEW) &&
                 (id(menu_functions)[id(menu_current_node)] != FUNC_OVERVIEW &&
                  id(menu_functions)[id(menu_current_node)] != FUNC_BUTTON);
        it.printf(120, 24, id(small_font), TextAlign::TOP_CENTER, "%s%s", id(menu_labels)[id(menu_current_node)], s ? " >" : "" );

        if(id(menu_subpage) <= PAGE_SET) {
          switch(id(menu_functions)[id(menu_current_node)]){
            case FUNC_SLIDER: {
              // Setting progressbar, outline rectangle
              it.rectangle(8, 58, 224, 54, color_gray);
              // Inner fill
              int x_pos = round(id(menu_current_percentage) * 220.d);
              it.filled_rectangle(10, 60, x_pos, 50, color_brown);
              // Value
              it.printf(120, 60, id(big_font), COLOR_ON, TextAlign::TOP_CENTER, "%.2f%s", id(menu_current_value), id(menu_units)[id(menu_current_node)]);
              break;
            }
            case FUNC_SWITCH:
              // Labels
              it.printf(42, 12, id(small_font), TextAlign::TOP_RIGHT, "Off");
              it.printf(86, 12, id(small_font), TextAlign::TOP_LEFT, "On");
              // Switch, outline rectangle
              it.rectangle(52, 20, 24, 12);
              // Inner toggle
              it.filled_rectangle(54 + id(rotary_dial).state*10, 22, 10, 8);
              break;
            case FUNC_BUTTON: { // show button
              if(id(rotary_dial_push).state == 1) {
                it.filled_rectangle(20, 100, 200, 80, color_gray);
              } else {
                it.rectangle(20, 100, 200, 80, color_gray);
              }
              it.printf(120, 120, id(icon_font), COLOR_ON, TextAlign::TOP_CENTER, "%s", id(menu_units)[id(menu_current_node)]);
              break;
            }
            case FUNC_CLIMATE: // Climate control
              it.gauge(120, 140, 80, id(menu_current_percentage), color_gray, color_green, id(menu_subpage) == PAGE_SET);
              it.printf(120, 90, id(big_font), COLOR_ON, TextAlign::TOP_CENTER, "%.1f", id(menu_current_value));
              it.printf(120, 132, id(small_font), COLOR_ON, TextAlign::TOP_CENTER, "%.1f", id(menu_target_value));
              it.printf(230, 200, id(small_font), COLOR_ON, TextAlign::TOP_RIGHT, "%.0f%s", id(menu_weather_value), id(menu_units)[id(menu_current_node)]);
              break;
          }
        } else {
          // Show value only if Display or Setting
          switch(id(menu_functions)[id(menu_current_node)]){
            case FUNC_SLIDER:
              it.printf(120, 60, id(big_font), COLOR_ON, TextAlign::TOP_CENTER, "%.2f", id(menu_current_value));
              break;
            case FUNC_SWITCH:
              it.printf(64, 12, id(small_font), TextAlign::TOP_LEFT, "%s", id(menu_current_value) == 0 ? "Off" : "On");
              break;
            case FUNC_CLIMATE: {
              switch(id(menu_current_node)) {
                case 1:
                    it.graph(6, 60, id(temperature_graph), color_gray);
                    break;
                case 2:
                    it.graph(6, 60, id(humidity_graph), color_gray);
                    break;
              }
            }
          }
        }
      }

color:
  - id: color_red
    red: 100%
  - id: color_blue
    color: [0, 50, 255]
  - id: color_green
    green: 100%
  - id: color_yellow
    color: [255, 255, 0]
  - id: color_dark_purple
    color: [50, 0, 127]
  - id: color_gray
    color: [72, 72, 72]
  - id: color_brown
    color: [100, 72, 0]
  - id: color_thermostat
    color: [64, 64, 64]
  - id: color_hygrostat
    color: [64, 64, 64]
  - id: color_co2
    color: [64, 64, 64]
  - id: color_scenic_light

image:
  - file: "custom_components/geckocontrol-logo.png"
    id: gecko_logo
    type: RGB24

colorpicker:
    id: color_picker
    dimensions: 180x180

graph:
  - id: temperature_graph
    duration: 15min
    x_grid: 1min
    y_grid: 1.0     # degC/div
    width: 228
    height: 180
    traces:
      - sensor: thermostat_current_temperature
        line_type: SOLID
        line_thickness: 2
        color: color_red
      - sensor: weather_temperature
        line_type: SOLID
        line_thickness: 2
        color: color_yellow
  - id: humidity_graph
    duration: 15min
    x_grid: 1min
    y_grid: 1.0     # degC/div
    width: 228
    height: 180
    traces:
      - sensor: hygrostat_current_humidity
        line_type: SOLID
        line_thickness: 2
        color: color_red
      - sensor: weather_humidity
        line_type: SOLID
        line_thickness: 2
        color: color_yellow
      - sensor: ceiling_humidity
        line_type: SOLID
        line_thickness: 1
        color: color_blue
      - sensor: ground_humidity
        line_type: SOLID
        line_thickness: 1
        color: color_green
