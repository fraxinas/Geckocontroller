esphome:
  name: geckoconsole
  platform: ESP32
  board: nodemcu-32s
  # includes:
  #   - custom_components/vcnl4040/vcnl4040.h
  # libraries:
  #  - "Adafruit BusIO@^1.11.1"
  #  - "Adafruit VCNL4040@^1.0.1"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geckocontrol Fallback Hotspot"
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
ota:

time:
  - platform: homeassistant
    id: esptime

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

#uart:
  #rx_pin: GPIO15
  #tx_pin: GPIO13
  #baud_rate: 9600

i2c:
  sda: 21
  scl: 22
  scan: True
  id: bus_a

binary_sensor:
  - platform: gpio
    id: button
    name: "Rotary Button"
    pin:
      number: GPIO16
      inverted: true

sensor:
  - platform: rotary_encoder
    id: rotary_enc
    name: "Rotary Encoder"
    pin_a: GPIO17
    pin_b: GPIO05

  #- platform: mhz19
    #id: co2_sensor
    #co2:
      #name: "MH-Z19 CO2 Value"
    #temperature:
      #name: "MH-Z19 Temperature"
    #update_interval: 60s
    #automatic_baseline_calibration: false

  - platform: homeassistant   # Forecast minimal temperature
    id: weather_tempmin
    entity_id: sensor.today_min

  - platform: homeassistant   # Forecast maximal temperature
    id: weather_tempmax
    entity_id: sensor.today_max

  - platform: homeassistant   # Forecast precipitation
    id: weather_precipitation
    entity_id: sensor.today_rain

  # - platform: custom
  #   lambda: |-
  #     auto MyVCNL4040_sensor = new MyVCNL4040();
  #     App.register_component(MyVCNL4040_sensor);
  #     return {MyVCNL4040_sensor->prox_sensor, MyVCNL4040_sensor->lux_sensor, MyVCNL4040_sensor->rawLight_sensor};
  #   sensors:
  #   - name: "Proximity sensor"
  #   - name: "Lux sensor"
  #   - name: "Raw Light sensor"

output:
  - platform: ledc
    pin: GPIO04
    id: buzzer

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO33
    num_leds: 6
    rgb_order: GRB
    id: rgb_leds
    name: "RGB LEDs"
    default_transition_length: 0s
    color_correct: [50%, 50%, 50%]
    restore_mode: ALWAYS_ON
  # - platform: monochromatic
  #   output: buzzer
  #   name: "Buzzer"

rtttl:
  output: buzzer
  on_finished_playback:
    - logger.log: 'Song ended!'

status_led:
  pin: GPIO02

# font:
#   - file: "/usr/share/fonts/TTF/OpenSans-SemiBoldItalic.ttf"
#     id: font1
#     size: 32

# display:
#   - platform: st7789v
#     id: gecko_display
#     dc_pin: GPIO22
#     reset_pin: GPIO21
#     backlight_pin: GPIO32
#     dimensions: 240x240
#     update_interval: 1s
#     lambda: |-
#       it.print(0, 0, id(font1), "Geckocontrol");
#       it.strftime(0, 32, id(font1), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());
#       if (id(weather_tempmin).has_state() && id(weather_tempmax).has_state())
#       {
#         it.printf(0, 66, id(font1), 0xFFFF, TextAlign::TOP_LEFT, "T: %.1f-%.1fÂ°C", id(weather_tempmin).state, id(weather_tempmax).state);
#       }
#       if (id(weather_precipitation).has_state())
#       {
#         it.printf(0, 92, id(font1), 0xFFFF, TextAlign::TOP_LEFT, "prec: %.1fmm", id(weather_precipitation).state);
#       }
