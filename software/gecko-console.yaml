esphome:
  name: geckoconsole
  platform: ESP32
  board: nodemcu-32s
  # includes:
  #   - custom_components/vcnl4040/vcnl4040.h
  # libraries:
  #  - "Adafruit BusIO@^1.11.1"
  #  - "Adafruit VCNL4040@^1.0.1"
  on_boot:
    priority: 250
    then:
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - binary_sensor.template.publish:
          id: api_connected
          state: OFF
      - wait_until:
          api.connected
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - binary_sensor.template.publish:
          id: api_connected
          state: ON

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geckocontrol Fallback Hotspot"
    password: !secret fallback_password

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: mhz19_calibrate_zero
      then:
        - mhz19.calibrate_zero: co2_sensor

ota:

#####
#####  CONFIGURATION BLOCK HERE
#####
substitutions:
  friendlyName: Gecko

  # Menu system
  menuSize: '4'

#####  END OF CONFIGURATION BLOCK

globals:
# Wait indicator
   - id: wi
     type: unsigned char
     initial_value: '0'

# Blank screen
   - id: s_blank
     type: bool
     initial_value: 'false'

# Menu helpers
   - id: menu_current_node
     type: unsigned char
     initial_value: '0'

   - id: menu_current_label
     type: char *

   - id: menu_current_value
     type: float

   - id: menu_target_value
     type: float

   - id: menu_weather_value
     type: float

     # 0 = view, 1 = set, 2 = graph
   - id: menu_subpage
     type: unsigned char
     initial_value: '0'

   - id: menu_no_hass_updates
     type: bool
     initial_value: 'false'


#####
#####  CONFIGURATION BLOCK HERE
#####

     # Set these to labels you want to display
   - id: menu_labels
     type: char * [${menuSize}]
     initial_value: '{"Overview","Thermostat","Day Light","Hygrostat"}'

   - id: menu_units
     type: char * [${menuSize}]
     initial_value: '{"","°C","","%"}'

     # Set these to functions of particular menu items
   - id: menu_functions
     type: unsigned char[${menuSize}]
     initial_value: '{0,8,3,8}'

     # The range maximum value
   - id: menu_rotary_ticks
     type: int [${menuSize}]
     initial_value: '{4,0,0,0}'

   - id: menu_increment
     type: float [${menuSize}]
     initial_value: '{0,0.5,1,2}'

script:
# What value to display for each menu item
  - id: menu_maxvals
    then:
      - lambda: |-
          id(menu_rotary_ticks)[1] = (id(thermostat_max_temperature).state-id(thermostat_min_temperature).state)/id(menu_increment)[1];
          id(menu_rotary_ticks)[3] = (id(hygrostat_max_humidity).state-id(hygrostat_min_humidity).state)/id(menu_increment)[3];

  - id: menu_values
    then:
      - lambda: |-
          switch(id(menu_current_node)) {
            case 1:
              id(menu_current_value) = id(thermostat_current_temperature).state;
              id(menu_target_value) = id(thermostat_target_temperature).state;
              id(menu_weather_value) = id(weather_temperature).state;
              ESP_LOGD("console", "read temperatures current: %.2f°C, target: %.2f°C (max_rot=%d) weather: %.2f°C", id(menu_current_value), id(menu_target_value), id(menu_rotary_ticks)[1], id(menu_weather_value));
              break;
            case 2:
              float b;
              id(rgb_leds).current_values_as_brightness(&b);
              id(menu_current_value) = b*100.f;
              ESP_LOGD("console", "read brightness: %f -> menu_current_value: %f", b, id(menu_current_value));
              break;
            case 3:
              id(menu_current_value) = id(hygrostat_current_humidity).state;
              id(menu_target_value) = id(hygrostat_target_humidity).state;
              id(menu_weather_value) = id(weather_humidity).state;
              ESP_LOGD("console", "read humiditys current: %.0f, target: %.0f (max_rot=%d) weather: %.0f", id(menu_current_value), id(menu_target_value), id(menu_rotary_ticks)[3], id(menu_weather_value));
              break;
          }

# What value to set rotary encoder to for each menu item setting
  - id: menu_set_rotary
    then:
      - lambda: |-
          switch(id(menu_current_node)) {
            case 1: {
              float target_temp = id(thermostat_target_temperature).state;
              double step = 1./id(menu_increment)[1];
              int rot_val = round(step * target_temp - step * id(thermostat_min_temperature).state);
              if (id(rotary_dial).state == rot_val)
                break;
              id(rotary_dial).set_value(rot_val);
              ESP_LOGD("console", "read thermostat target temperature: %.2f°C, initialized rotary dial with %.0f", target_temp, id(rotary_dial).state);
              break;
            }
            case 2: {
              float b;
              id(rgb_leds).current_values_as_brightness(&b);
              id(rotary_dial).set_value(b*id(menu_rotary_ticks)[id(menu_current_node)]);
              ESP_LOGD("console", "read brightness: %f, initialized rotary dial with %f", b, id(rotary_dial).state);
              break;
            }
            case 3: {
              float target_hum = id(hygrostat_target_humidity).state;
              double step = 1./id(menu_increment)[3];
              int rot_val = round(step * target_hum - step * id(hygrostat_min_humidity).state);
              if (id(rotary_dial).state == rot_val)
                break;
              id(rotary_dial).set_value(rot_val);
              ESP_LOGD("console", "read hygrostat target humidity: %.0f%%, initialized rotary dial with %.0f", target_hum, id(rotary_dial).state);
              break;
            }
          }
          id(menu_no_hass_updates) = true;
      - script.execute: menu_hass_updates_timeout

# Actions for each menu item setting
  - id: menu_actions
    then:
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 1;'
          then:
            homeassistant.service:
              service: climate.set_temperature
              variables:
                x: |-
                  double rot_val = id(rotary_dial).state;
                  double set_val = id(menu_increment)[1] * rot_val + id(thermostat_min_temperature).state;
                  ESP_LOGD("console", "rotary val=%.2f -> change temp setpoint to %.2f°C", rot_val, set_val);
                  return set_val;
              data_template:
                entity_id: climate.thermostat_air
                temperature: '{{ x }}'

      - if:
          condition:
            lambda: 'return id(menu_current_node) == 2;'
          then:
            - lambda: |-
                auto call = id(rgb_leds).make_call();
                float b = id(rotary_dial).state;
                ESP_LOGD("console", "change brightness to %f %%", b);
                if (b > 0.)
                  call = id(rgb_leds).turn_on();
                call.set_brightness(b/id(menu_rotary_ticks)[id(menu_current_node)]);
                call.perform();

      - if:
          condition:
            lambda: 'return id(menu_current_node) == 3;'
          then:
            homeassistant.service:
              service: climate.set_temperature
              variables:
                x: |-
                  double rot_val = id(rotary_dial).state;
                  double set_val = id(menu_increment)[3] * rot_val + id(hygrostat_min_humidity).state;
                  ESP_LOGD("console", "rotary val=%.2f -> change hygro setpoint to %.0f%%", rot_val, set_val);
                  return set_val;
              data_template:
                entity_id: climate.hygrostat
                temperature: '{{ x }}'

  - id: menu_hass_updates
    then:
      - if:
          condition:
            lambda: 'return id(menu_no_hass_updates) == true;'
          then:
            - script.execute: menu_values
            - script.execute: menu_set_rotary

#####  END OF CONFIGURATION BLOCK

  - id: overview_timeout
    mode: restart
    then:
      - delay: 1min
      - lambda: >-
          id(menu_current_node) = 0;
          id(menu_subpage) = 0;
          id(rotary_dial).set_value(0);
  - id: menu_hass_updates_timeout
    mode: restart
    then:
      - delay: 0.5s
      - lambda: >-
          id(menu_no_hass_updates) = false;

interval:
# Screen saver logic & wait indicator
  - interval: 2s
    then:
      - lambda: |-
          id(wi) = ++id(wi) > 15 ? 0 : id(wi); // wait indicator logic

time:
  - platform: homeassistant
    id: ha_time

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

uart:
  rx_pin: GPIO15
  tx_pin: GPIO13
  baud_rate: 9600

i2c:
  sda: 25
  scl: 26
  scan: True
  id: bus_a

binary_sensor:
  - platform: gpio
    id: rotary_dial_push
    name: "Rotary Button"
    pin:
      number: GPIO16
      inverted: true
    internal: true
    on_press:
      then:
        - if:
            condition:
              api.connected
            then:
              - if:
                  condition:
                    # Set mode for continuous or binary setting
                    lambda: |-
                        return (id(menu_functions)[id(menu_current_node)] == 3 ||
                                id(menu_functions)[id(menu_current_node)] == 4 ||
                                id(menu_functions)[id(menu_current_node)] == 6 ||
                                id(menu_functions)[id(menu_current_node)] == 8);
                  then:
                    - lambda: |-
                        //toggle set mode
                        switch (id(menu_subpage)) {
                          case 0:
                            id(menu_subpage) = 1;
                            break;
                          case 1:
                            id(menu_subpage) = 0;
                            break;
                          case 2:
                            id(menu_subpage) = 0;
                            break;
                        }

              - if:
                  condition:
                    # Button action
                    lambda: 'return id(menu_functions)[id(menu_current_node)] == 5;'
                  then:
                     - script.execute: menu_actions

              # If set mode, set rotary
              - if:
                  condition:
                    lambda: 'return (id(menu_subpage) == 1);'
                  then:
                    - script.execute: menu_set_rotary

              # Display entities value for each menu item
              - script.execute: menu_values
              - script.execute: overview_timeout
  - platform: gpio
    id: button_2
    pin:
      number: GPIO34
      inverted: true
    internal: true
    on_press:
      then:
        - lambda: |-
            switch (id(menu_subpage)) {
              case 0:
              case 1:
                id(menu_subpage) = 2;
                break;
              case 2:
                id(menu_subpage) = 0;
                id(menu_current_node) = 0;
                //reset rotary to 0
                id(rotary_dial).set_value(0);
                break;
            }
        - script.execute: overview_timeout

  - platform: template
    id: api_connected

sensor:
  - platform: rotary_encoder
    id: rotary_dial
    name: "Rotary Encoder"
    pin_a: GPIO17
    pin_b: GPIO05
    filters:
      - lambda: |-
          int maxval = ${menuSize};
          if(id(menu_subpage) == 1) { //if set mode, rotary should go from 0 to according setting
            switch(id(menu_functions)[id(menu_current_node)]){
              case 3:
              case 6:
                maxval = id(menu_rotary_ticks)[id(menu_current_node)] + 1; break; // continuous
              case 4: maxval = 2; break;  // binary
              case 8: break;
            }
          }

          ESP_LOGD("console", "rotary x=%f maxval=%d", x, maxval);

          //if rotary is over length, set to length
          if(x >= maxval) {
            id(rotary_dial).set_value(maxval-1);
            return maxval-1;
          } else if (x < 0) {
            return 0;
          }
          return x;
    resolution: 1
    min_value: 0
    internal: true
    on_clockwise:
      then:
        - if:
            condition:
              lambda: 'return (id(menu_subpage) != 1);'
            then:
              - lambda: |-
                  ESP_LOGD("console", "clockwise current=%d rot=%f", id(menu_current_node), id(rotary_dial).state);
                  if (id(menu_current_node) < ${menuSize}-1)
                    id(menu_current_node)++;
                  else
                    id(menu_current_node) = 0;
                  ESP_LOGD("console", "clockwise new=%d", id(menu_current_node));
    on_anticlockwise:
      then:
        - if:
            condition:
              lambda: 'return (id(menu_subpage) != 1);'
            then:
              - lambda: |-
                  ESP_LOGD("console", "counter-clockwise current=%d rot=%f", id(menu_current_node), id(rotary_dial).state);
                  if (id(menu_current_node) >= 1)
                    id(menu_current_node)--;
                  else
                    id(menu_current_node) = ${menuSize}-1;
                  ESP_LOGD("console", "counter-clockwise new=%d", id(menu_current_node));

    on_value:
      then:
        - if:
            condition:
              api.connected
            then:
              - if:
                  # Modify values
                  condition:
                    lambda: 'return (id(menu_subpage) == 1);'
                  then:
                    - script.execute: menu_actions
                # Update value
              - delay: 0.05s
              - script.execute: menu_values
              - script.execute: overview_timeout
              - if:
                  condition:
                    lambda: 'return (id(menu_functions)[id(menu_current_node)] == 8);'
                  then:
                    - script.execute: menu_set_rotary

  - platform: wifi_signal
    id: wifisignal
    update_interval: 20s

  - platform: template
    id: wifistep
    update_interval: 20s
    lambda: |-
      if(isnan(id(wifisignal).state)) return 0;
      else return round((id(wifisignal).state+100)/10);

  - platform: mhz19
    id: co2_sensor
    co2:
      name: "MH-Z19 CO2 Value"
      id: co2_val
      on_value:
        then:
          - lambda: |-
              auto call = id(rgb_leds).make_call();
              double r=0.0, g=0.0, b=0.0;
              g = 1.6 - 0.001*x;
              r = -0.5 + 0.001*x;
              call.set_rgb(r,g,b);
              call.perform();
              if (x > 1800) {
                id(rtttlplayer).play("GoodBad:d=4,o=5,b=56:32p,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,d#,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,c#6,32a#,32d#6,32a#,32d#6,8a#.,16f#.,32f.,32d#.,c#,32a#,32d#6,32a#,32d#6,8a#.,16g#.,d#,1p,1p,1p,1p,1p,1p");
              }
    temperature:
      name: "MH-Z19 Temperature"
      id: temp_val
    update_interval: 20s
    automatic_baseline_calibration: false

# Temperatures from Home Assistant
  - platform: homeassistant
    id: thermostat_target_temperature
    entity_id: climate.thermostat_air
    attribute: temperature
    internal: true
    on_value:
      then:
        - script.execute: menu_hass_updates
  - platform: homeassistant
    id: thermostat_current_temperature
    entity_id: climate.thermostat_air
    attribute: current_temperature
    internal: true
    on_value:
      then:
        - script.execute: menu_hass_updates
  - platform: homeassistant
    id: thermostat_min_temperature
    entity_id: climate.thermostat_air
    attribute: min_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: thermostat_max_temperature
    entity_id: climate.thermostat_air
    attribute: max_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: ground_temperature
    entity_id: sensor.ground_temperature
    internal: true
  - platform: homeassistant
    id: weather_temperature
    entity_id: sensor.temperature_in_france_noumea_182_days_ago
    internal: true
    on_value:
      then:
        - script.execute: menu_hass_updates
  - platform: homeassistant
    id: hygrostat_target_humidity
    entity_id: climate.hygrostat
    attribute: temperature
    internal: true
    on_value:
      then:
        - script.execute: menu_hass_updates
  - platform: homeassistant
    id: hygrostat_current_humidity
    entity_id: climate.hygrostat
    attribute: current_temperature
    internal: true
    on_value:
      then:
        - script.execute: menu_hass_updates
  - platform: homeassistant
    id: hygrostat_min_humidity
    entity_id: climate.hygrostat
    attribute: min_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: hygrostat_max_humidity
    entity_id: climate.hygrostat
    attribute: max_temp
    internal: true
    on_value:
      then:
        - script.execute: menu_maxvals
  - platform: homeassistant
    id: weather_humidity
    entity_id: sensor.humidity_in_france_noumea_182_days_ago
    internal: true
    on_value:
      then:
        - script.execute: menu_hass_updates
  - platform: homeassistant
    id: ceiling_humidity
    entity_id: sensor.ceiling_humidity
    internal: true
  - platform: homeassistant
    id: ground_humidity
    entity_id: sensor.ground_humidity
    internal: true

  # - platform: custom
  #   lambda: |-
  #     auto MyVCNL4040_sensor = new MyVCNL4040();
  #     App.register_component(MyVCNL4040_sensor);
  #     return {MyVCNL4040_sensor->prox_sensor, MyVCNL4040_sensor->lux_sensor, MyVCNL4040_sensor->rawLight_sensor};
  #   sensors:
  #   - name: "Proximity sensor"
  #   - name: "Lux sensor"
  #   - name: "Raw Light sensor"

output:
  - platform: ledc
    pin: GPIO04
    id: buzzer

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO33
    num_leds: 6
    rgb_order: GRB
    id: rgb_leds
    name: "RGB LEDs"
    default_transition_length: 0s
    color_correct: [50%, 50%, 50%]
    restore_mode: ALWAYS_ON
  # - platform: monochromatic
  #   output: buzzer
  #   name: "Buzzer"

rtttl:
  output: buzzer
  on_finished_playback:
    - logger.log: 'Song ended!'
  id: rtttlplayer

status_led:
  pin: GPIO02

font:
  - file: "/usr/share/fonts/TTF/OpenSans-Regular.ttf"
    id: big_font
    size: 40
    glyphs: ">-:%°na0123456789C."

  - file: "/usr/share/fonts/TTF/OpenSans-Light.ttf"
    id: small_font
    size: 26
    glyphs: ">-:/%&!°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."

  - file: "/usr/share/fonts/TTF/OpenSans-Light.ttf"
    id: tiny_font
    size: 19
    glyphs: ":0123456789Conectig.pm"

display:
  - platform: st7789v
    id: gecko_display
    dc_pin: GPIO22
    reset_pin: GPIO21
    backlight_pin: GPIO32
    cs_pin: GPIO02
    dimensions: 240x240
    update_interval: 0.5s
    rotation: 0
    lambda: |-
      auto dark_purple = Color(50, 0, 128);
      auto white = Color(255, 255, 255);
      auto gray = Color(80, 80, 80);
      auto brown = Color(100, 80, 0);
      auto green = Color(50, 200, 82);

      if (!id(api_connected).state){
        // Little animation before API is online
        it.line(56, 32, 56+id(wi), 32);

      } else {
        // Blank screen if PIR off
        if (id(s_blank)) { it.fill(COLOR_OFF); return; }

        // Header Background
        it.filled_rectangle(0,0,240,16,dark_purple);
        // Header time
        it.strftime(0, 6, id(tiny_font), COLOR_ON, TextAlign::CENTER_LEFT, "%H:%M", id(ha_time).now());
        // Header CO2
        it.printf(200, 6, id(tiny_font), COLOR_ON, TextAlign::CENTER_RIGHT, "%.0fppm", id(co2_val).state);
        // Header wifi
        for(int i=0; i<5; i++) if(i<id(wifistep).state) it.filled_rectangle(216+i*5,8-i*2,4,i*2+4); else it.rectangle(216+i*5,8-i*2,4,i*2+4);
        // Header menu level
        // y-coord start of the menu pos display
        int b = 64 - (2 * ${menuSize});
        for(int i=0; i<${menuSize}; i++) {
          int itb = b + i*4;
          if(id(menu_current_node) == i)
            it.filled_rectangle(itb, 6, 6, 6);
          else
            it.filled_rectangle(itb+2, 8, 2, 2);
        };

        // Show label
        bool s = (id(menu_subpage) == 0) &&
                (id(menu_functions)[id(menu_current_node)] == 2 ||
                id(menu_functions)[id(menu_current_node)] == 3 ||
                id(menu_functions)[id(menu_current_node)] == 4 ||
                id(menu_functions)[id(menu_current_node)] == 6 );
        it.printf(120, 24, id(small_font), TextAlign::TOP_CENTER, "%s%s", id(menu_labels)[id(menu_current_node)], s ? " >" : "" );

        // Overview
        if(id(menu_current_node) == 0) {
          float actual_temp = id(thermostat_current_temperature).state;
          float diff = actual_temp-id(thermostat_target_temperature).state;
          auto color = Color(0, 200, 0);
          if (diff > 1)
            color = Color(255, 0, 0);
          else if (diff < -1)
            color = Color(0, 100, 255);
          it.filled_rectangle(10, 60, 220, 50, color);

          float actual_hum = id(hygrostat_current_humidity).state;
          diff = actual_hum-id(hygrostat_target_humidity).state;
          if (diff > 4)
            color = Color(0, 0, 255);
          else if (diff < -4)
            color = Color(255, 0, 0);
          else
            color = Color(0, 200, 0);
          it.filled_rectangle(10, 120, 220, 50, color);
          it.printf(120, 60, id(big_font), COLOR_OFF, TextAlign::TOP_CENTER, "%.1f°C", actual_temp);
          it.printf(120, 120, id(big_font), COLOR_OFF, TextAlign::TOP_CENTER, "%.0f%%", actual_hum);
          return;
        }
        else if(id(menu_subpage) <= 1) {
          switch(id(menu_functions)[id(menu_current_node)]){
            case 3:
            case 6: {
              // Setting progressbar, outline rectangle
              it.rectangle(8, 58, 224, 54, gray);
              // Inner fill
              int x_pos = round(id(rotary_dial).state / id(menu_rotary_ticks)[id(menu_current_node)] * 220.d);
              it.filled_rectangle(10, 60, x_pos, 50, brown);
              // Value
              it.printf(120, 60, id(big_font), white, TextAlign::TOP_CENTER, "%.2f%s", id(menu_current_value), id(menu_units)[id(menu_current_node)]);
              break;
            }
            case 4:
              // Labels
              it.printf(42, 12, id(small_font), TextAlign::TOP_RIGHT, "Off");
              it.printf(86, 12, id(small_font), TextAlign::TOP_LEFT, "On");
              // Switch, outline rectangle
              it.rectangle(52, 20, 24, 12);
              // Inner toggle
              it.filled_rectangle(54 + id(rotary_dial).state*10, 22, 10, 8);
              break;
            case 8: // Climate control
              double percentage = id(rotary_dial).state / id(menu_rotary_ticks)[id(menu_current_node)];
              ESP_LOGD("console", "render climate percentage=%f rotary_state=%.0f ticks=%d", percentage, id(rotary_dial).state, id(menu_rotary_ticks)[id(menu_current_node)]);
              it.gauge(120, 140, 80, percentage, gray, green, id(menu_subpage) == 1);
              it.printf(120, 90, id(big_font), white, TextAlign::TOP_CENTER, "%.1f", id(menu_current_value));
              it.printf(120, 132, id(small_font), white, TextAlign::TOP_CENTER, "%.1f", id(menu_target_value));
              it.printf(230, 200, id(small_font), white, TextAlign::TOP_RIGHT, "%.1f%s", id(menu_weather_value), id(menu_units)[id(menu_current_node)]);
              break;
          }
        } else {
          // Show value only if Display or Setting
          switch(id(menu_functions)[id(menu_current_node)]){
            case 1:
            case 3:
            case 6:
              it.printf(120, 60, id(big_font), white, TextAlign::TOP_CENTER, "%.2f", id(menu_current_value));
              break;
            case 4:
            case 7:
              it.printf(64, 12, id(small_font), TextAlign::TOP_LEFT, "%s", id(menu_current_value) == 0 ? "Off" : "On");
              break;
            case 5: // show button
              it.rectangle(52, 19, 24, 14);
              if(id(rotary_dial_push).state == 0){
                // horizontal shades
                it.line(53, 20, 73, 20);
                it.line(54, 31, 72, 31);
                // vertical shades
                it.line(53, 20, 53, 30);
                it.line(74, 21, 74, 29);
              }
              break;
            case 8: {
              switch(id(menu_current_node)) {
                case 1:
                    it.graph(6, 60, id(temperature_graph), gray);
                    break;
                case 3:
                    it.graph(6, 60, id(humidity_graph), gray);
                    break;
              }
            }
          }
        }
      }

color:
  - id: my_light_red
    red: 100%
    green: 20%
    blue: 25%
  - id: my_light_blue
    red: 20%
    green: 25%
    blue: 100%
  - id: my_light_green
    red: 22%
    green: 100%
    blue: 22%
  - id: my_light_yellow
    red: 100%
    green: 100%
    blue: 22%

graph:
  - id: temperature_graph
    duration: 15min
    x_grid: 1min
    y_grid: 1.0     # degC/div
    width: 228
    height: 180
    traces:
      - sensor: thermostat_current_temperature
        line_type: SOLID
        line_thickness: 2
        color: my_light_red
      - sensor: weather_temperature
        line_type: SOLID
        line_thickness: 2
        color: my_light_yellow
  - id: humidity_graph
    duration: 15min
    x_grid: 1min
    y_grid: 1.0     # degC/div
    width: 228
    height: 180
    traces:
      - sensor: hygrostat_current_humidity
        line_type: SOLID
        line_thickness: 2
        color: my_light_red
      - sensor: weather_humidity
        line_type: SOLID
        line_thickness: 2
        color: my_light_yellow
      - sensor: ceiling_humidity
        line_type: SOLID
        line_thickness: 1
        color: my_light_blue
      - sensor: ground_humidity
        line_type: SOLID
        line_thickness: 1
        color: my_light_green
