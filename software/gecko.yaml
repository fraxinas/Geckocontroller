esphome:
  name: geckocontrol
  platform: ESP32
  board: nodemcu-32s
  includes: gecko_custom.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geckocontrol Fallback Hotspot"
    password: !secret fallback_password

#captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  services:
    - service: control_rain
      variables:
        level: float
      then:
        - output.set_level:
            id: rain_pump_float
            level: !lambda 'return level / 100.0;'
ota:

custom_component:
- lambda: |-
    auto gecko_custom = new GeckoCustomComponent();
    return {gecko_custom};

switch:
  - platform: template
    id: fan_switch
    name: "Ventilator on/off"
    turn_on_action:
      then:
        - output.set_level:
            id: fan_pwm
            level: 75%
    turn_off_action:
      then:
        - output.set_level:
            id: fan_pwm
            level: 0%
            
  - platform: template
    id: heat_lamp
    name: "Heat Lamp on/off"
    turn_on_action:
      then:
        - output.set_level:
            id: heat_lamp_pwm
            level: 100%
    turn_off_action:
      then:
        - output.set_level:
            id: heat_lamp_pwm
            level: 0%

  - platform: template
    id: pump_switch_momentary
    name: "Let it rain"
    turn_on_action:
      - output.turn_on:
          id: rain_pump
      - delay: 5s
      - output.turn_off:
          id: rain_pump
      - switch.turn_off: pump_switch_momentary

  - platform: template
    id: fog_switch_momentary
    name: "Sleepy hollow"
    turn_on_action:
      - output.turn_on:
          id: fogger
      - delay: 30s
      - output.turn_off:
          id: fogger
      - switch.turn_off: fog_switch_momentary

output:
  - platform: ac_dimmer
    id: dimmer1
    gate_pin: 16
    min_power: 15%
    zero_cross_pin:
      number: 17
      mode: INPUT
      inverted: no
  - platform: slow_pwm
    pin: 15
    id: heat_lamp_pwm
    period: 2min
  - platform: gpio
    pin: 4
    id: rain_pump
  - platform: gpio
    pin: 2
    id: fogger
  - platform: ledc
    pin: 32
    id: component_red
  - platform: ledc
    pin: 33
    id: component_green
  - platform: ledc
    pin: 27
    id: component_blue
  - platform: ledc
    pin: GPIO14
    id: fan_pwm
    frequency: 25000 hz
    channel: 4
  - platform: custom
    type: float
    lambda: |-
      auto rain_pump_output_c = new RainPumpOutput();
      App.register_component(rain_pump_output_c);
      return {rain_pump_output_c};
    outputs:
      id: rain_pump_float
      #period: 30min
      max_power: 0.02
      # max. 18 seconds of rain per half hour

light:
  - platform: monochromatic
    id: day_light
    output: dimmer1
    name: "Dimmer Daylight"
    gamma_correct: 1.0
    default_transition_length: 0s

  - platform: rgb
    name: "Scenic Light"
    id: scenic_light
    red: component_red
    green: component_green
    blue: component_blue
    effects:
      - lambda:
          name: Lightning
          update_interval: 50ms
          lambda: |-
            static bool flashing = true;
            static uint8_t r = 0;
            auto call = id(scenic_light).make_call();
            if (r == 0) {
              call.set_rgb(1.,1.,1.);
              call.perform();
            }
            r = random(1,100);
            if (r > 95) {
              call.set_transition_length(5);
              call.set_brightness(1.0);
              call.perform();
              flashing = true;
            } else if (flashing) {
              call.set_transition_length(300);
              call.set_brightness(0.01);
              call.perform();
              flashing = false;
            }

  - platform: monochromatic
    output: fan_pwm
    name: "Ventilator"
    gamma_correct: 1.0

i2c:
  sda: 25
  scl: 26
  scan: True
  id: bus_a

dallas:
  - pin: 22
    update_interval: 5min

sensor:
  - platform: hx711
    name: "Scale"
    dout_pin: 34
    clk_pin: 13
    gain: 128
    update_interval: 15s
    accuracy_decimals: 2
    unit_of_measurement: g
    filters:
      - calibrate_linear:
          - 250000 -> 0
          - 456666 -> 100
      - delta: 0.2
      - filter_out: -121
      - lambda: |-
            return (x > 2.5 ? x : 0.0);
             
  - platform: dallas
    address: !secret DsAddressHeatBed
    name: "Temperature HeatBed"
    unit_of_measurement: "°C"
    id: temperature_heatbed

  - platform: dallas
    address: !secret DsAddressSubstrate
    name: "Temperature Substrate"
    unit_of_measurement: "°C"
    id: temperature_substrate

  - platform: bme280
    temperature:
      name: "Ceiling Temperature"
      oversampling: 16x
      id: temperature_ceiling
      filters:
        - filter_out: 188.1
        - filter_out: -60.6
        - filter_out: -61.9
    pressure:
      name: "Air Pressure"
    humidity:
      name: "Ceiling Humidity"
      id: humidity_ceiling
      filters:
        - filter_out: 100
        - filter_out: 0
    address: 0x76
    update_interval: 30s

  - platform: sht3xd
    temperature:
      name: "Ground Temperature"
      id: temperature_ground
      filters:
        - filter_out: 188.1
    humidity:
      name: "Ground Humidity"
      id: humidity_ground
    address: 0x44
    update_interval: 30s

  - platform: pulse_counter
    name: "Fan Tacho"
    pin: 35
    unit_of_measurement: rpm
    update_interval: 60s
    filters:
      multiply: 0.5

  - platform: sun
    name: Sun Elevation
    type: elevation

  - platform: homeassistant   # actual historic temperature
    id: weather_temperature
    entity_id: sensor.temperature_noumea
    on_value:
      then:
        - climate.control:
              id: thermostat_air
              target_temperature_low: !lambda |-
                return x-2;
              target_temperature_high: !lambda |-
                return x+2;

  - platform: homeassistant   # actual historic humidity
    id: weather_humidity
    entity_id: sensor.humidity_noumea
    on_value:
      then:
        - climate.control:
              id: humidity_control
              target_temperature_low: !lambda |-
                return x-4;
              target_temperature_high: !lambda |-
                return x;

  - platform: homeassistant   # actual historic rain intensity (range 0-5)
    id: weather_precipitation
    entity_id: sensor.rain_noumea
    on_value:
      then:
        - output.set_level:
            id: rain_pump_float
            level: !lambda |-
                return x/5.0;

  # actual historic sky conditions
  # a numeric value in the range of (0-22) which indicates increasing sky covering
  # we're going to interpret it as a correction factor for the daylight intensitiy,
  # the higher the value, the more daylight will be dimmed down
  - platform: homeassistant
    id: weather_sky
    entity_id: sensor.sky_noumea
    on_value:
      then:
        - lambda: |-
            ESP_LOGD(TAG, "sky value changed to: %f ", x);
            float b, dim_factor;
            id(day_light).current_values_as_brightness(&b);
            ESP_LOGD(TAG, "previous attenuated brightness: %f", b);
            b /= id(daylight_attenuation);
            ESP_LOGD(TAG, "previous normalized brightness: %f", b);
            id(daylight_attenuation) = id(daylight_max) * (24-x)/24;
            b *= id(daylight_attenuation);
            ESP_LOGD(TAG, "daylight_attenuation: %f", id(daylight_attenuation));
            ESP_LOGD(TAG, "target_brightness: %f", b);
            auto call = id(day_light).make_call();
            call.set_transition_length(60*1000);
            call.set_brightness(b);
            call.perform();

  - platform: template
    name: "Combined humidity"
    id: humidity_combined
    update_interval: 30s
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return (id(humidity_ceiling).state + id(humidity_ground).state) / 2.0;

sun:
  latitude: -22.6
  longitude: 167.5

# Sunset and Sunrise flipped because we are on the other side of the globe
  on_sunset:
    - elevation: 0°
      then:
        - lambda: |-
              auto call = id(scenic_light).turn_on();
              call.set_effect("Sunrise Color");
              call.perform();
              auto call2 = id(day_light).turn_on();
              call2.set_effect("Sunrise Daylight");
              call2.perform();
        - logger.log: Good morning, Gecko.

  on_sunrise:
    - elevation: -40°
      then:
        - lambda: |-
              auto call = id(day_light).make_call();
              call.set_effect("Sunset Daylight");
              call.perform();
    - elevation: -6°
      then:
        - logger.log: Good night, Gecko.
        - lambda: |-
              auto call = id(scenic_light).turn_on();
              call.set_effect("Sunset Color");
              call.perform();

time:
  - platform: homeassistant
    id: esptime

climate:
  - platform: thermostat
    id: thermostat_air
    name: "Thermostat Air Temp"
    sensor: temperature_ceiling
    default_target_temperature_low: 20 °C
    default_target_temperature_high: 28 °C
    min_cooling_off_time: 60s
    min_cooling_run_time: 60s
    min_heating_off_time: 60s
    min_heating_run_time: 120s
    min_idle_time: 60s
    cool_action:
      - switch.turn_on: fan_switch
    heat_action:
      - switch.turn_on: heat_lamp
    idle_action:
      - switch.turn_off: heat_lamp
      - switch.turn_off: fan_switch

  #- platform: pid
    #id: pid_heatbed
    #name: "PID Heatbed"
    #sensor: temperature_heatbed
    #default_target_temperature: 30°C
    #heat_output: heat_bed_pwm
    #control_parameters:
      #kp: 2.5
      #ki: 0.5
      #kd: 1.0

  - platform: bang_bang
    id: humidity_control
    name: "Humidity"
    sensor: humidity_combined
    default_target_temperature_low: 60 °C
    default_target_temperature_high: 80 °C
    visual:
      min_temperature: 30
      max_temperature: 98
      temperature_step: 2
    heat_action:
      - output.turn_on: fogger
    cool_action:
      - switch.turn_on: fan_switch
      - output.turn_off: fogger
    idle_action:
      - output.turn_off: fogger
      - switch.turn_off: fan_switch

globals:
   - id: scenic_light_effect
     type: uint8_t
     restore_value: no
     initial_value: '0'

   - id: daylight_max
     type: float
     restore_value: no
     initial_value: '0.75'

   - id: daylight_attenuation
     type: float
     restore_value: no
     initial_value: '0.7'

status_led:
  pin: GPIO12
