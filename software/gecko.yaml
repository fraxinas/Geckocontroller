esphome:
  name: geckocontrol
  platform: ESP32
  board: nodemcu-32s
  includes:
    - gecko_custom.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geckocontrol Fallback Hotspot"
    password: !secret fallback_password

#captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  services:
    - service: control_rain
      variables:
        level: float
      then:
        - output.set_level:
            id: rain_pump_float
            level: !lambda 'return level / 100.0;'
ota:

custom_component:
- lambda: |-
    auto gecko_custom = new GeckoCustomComponent();
    return {gecko_custom};

switch:
  - platform: template
    name: "Nighttime / Daytime"
    icon: mdi:theme-light-dark
    lambda: |-
      return id(is_daytime);
    turn_on_action:
      - lambda: |-
          id(is_daytime) = true;
    turn_off_action:
      - lambda: |-
          id(is_daytime) = false;

button:
  - platform: template
    id: pump_button
    name: "Let it rain"
    icon: "mdi:weather-rainy"
    on_press:
      - output.turn_on:
          id: rain_pump
      - delay: 4s
      - output.turn_off:
          id: rain_pump

  - platform: template
    id: fog_button
    name: "Sleepy hollow"
    icon: "mdi:weather-fog"
    on_press:
      - output.set_level:
            id: fogger_float
            level: 1.0
      - delay: 30s
      - output.set_level:
            id: fogger_float
            level: 0.0

output:
  - platform: ac_dimmer
    id: dimmer1
    gate_pin: 16
    min_power: 15%
    zero_cross_pin:
      number: 17
      mode: INPUT
      inverted: no
  - platform: slow_pwm
    pin: 15
    id: heat_lamp_pwm
    period: 1min
  - platform: gpio
    pin: 4
    id: rain_pump
  - platform: slow_pwm
    pin: 2
    id: fogger_float
    period: 60s
  - platform: ledc
    pin: 32
    id: component_red
    channel: 0
  - platform: ledc
    pin: 33
    id: component_green
    channel: 2
  - platform: ledc
    pin: 27
    id: component_blue
    channel: 4
  - platform: ledc
    pin: GPIO14
    id: fan_pwm
    frequency: 25000 hz
    channel: 7
  - platform: custom
    type: float
    lambda: |-
      auto rain_pump_output_c = new RainPumpOutput();
      App.register_component(rain_pump_output_c);
      return {rain_pump_output_c};
    outputs:
      id: rain_pump_float
      #period: 30min
      max_power: 0.02
      # max. 18 seconds of rain per half hour
  - platform: template
    id: fogger_humidifier
    type: float
    write_action:
      - lambda: |-
            ClimateAction action = id(humidity_control).action;
            if (action == CLIMATE_ACTION_HEATING) {
              float duty_cycle = state/4.0;
              ESP_LOGD(TAG, "Humidity PID Controller fogger write_action: %.3f / duty cycle: %.0f%%", state, duty_cycle*100);
              id(fogger_float).set_level(duty_cycle);
            } else {
              ESP_LOGD(TAG, "Humidity PID Controller turn off fogger");
            }
  - platform: template
    id: fan_dehumidifier
    type: float
    write_action:
      # fan slider MUST be controlled with FanStateCalls, fan->turn_on() etc. don't work
      - lambda: |-
            ClimateMode therm_mode = id(thermostat_air).mode;
            ClimateMode humid_mode = id(humidity_control).mode;
            if (humid_mode == CLIMATE_MODE_HEAT_COOL || humid_mode == CLIMATE_MODE_COOL) {
              auto fan = id(fan_speed).make_call();
              float hum_ctrl_val = id(humidity_control)->get_output_value() * (-1.0);
              float therm_ctrl_val = id(thermostat_air)->get_output_value() * (-1.0);
              float set_val = state * 100.0;
              if (therm_mode != CLIMATE_MODE_OFF) {
                set_val = (hum_ctrl_val*2.0 + therm_ctrl_val*0.5) * 50.0;
              }
              if (set_val > 100.0)
                set_val = 100.0;
              else if (set_val < 0)
                set_val = 0;
              ESP_LOGD(TAG, "Humidity PID Controller fan write_action: %.3f / humidifier: %.2f / thermostat: %.2f / result: %.0f%%", state, hum_ctrl_val, therm_ctrl_val, set_val);
              fan.set_state(!!set_val);
              fan.set_speed(set_val);
              fan.perform();
            } else {
              ESP_LOGD(TAG, "Humidity PID Controller dehumidifcation disabled, ignore fan value of %.3f", state);
            }
  - platform: template
    id: fan_cooler
    type: float
    write_action:
      - lambda: |-
            ClimateMode therm_mode = id(thermostat_air).mode;
            ClimateMode humid_mode = id(humidity_control).mode;
            if (therm_mode == CLIMATE_MODE_HEAT_COOL || humid_mode == CLIMATE_MODE_COOL) {
              auto fan = id(fan_speed).make_call();
              float hum_ctrl_val = id(humidity_control)->get_output_value() * (-1.0);
              float therm_ctrl_val = id(thermostat_air)->get_output_value() * (-1.0);
              float set_val = state * 100.0;
              if (therm_mode != CLIMATE_MODE_OFF) {
                set_val = (hum_ctrl_val*2.0 + therm_ctrl_val*0.5) * 50.0;
              } else {
                set_val = state * 100.0;
              }
              if (set_val > 100.0)
                set_val = 100.0;
              else if (set_val < 0)
                set_val = 0;
              ESP_LOGD(TAG, "Thermostat PID Controller fan write_action: %.3f / humidifier: %.2f / thermostat: %.2f / result: %.0f%%", state, hum_ctrl_val, therm_ctrl_val, set_val);
              fan.set_state(!!set_val);
              fan.set_speed(set_val);
              fan.perform();
            } else {
              ESP_LOGD(TAG, "Thermostat PID Controller cooling disabled, ignore fan value of %.3f", state);
            }

  - platform: template
    id: heater
    type: float
    write_action:
      - lambda: |-
            ClimateMode mode = id(thermostat_air).mode;
            if (mode == CLIMATE_MODE_OFF) {
                ESP_LOGD(TAG, "ignored heater write_action because thermostat is off");
            } else if (id(is_daytime) == true) {
              ESP_LOGD(TAG, "Temperature PID Controller daylight write_action: %.3f", state);
              auto daylight = id(day_light).make_call();
              daylight.set_transition_length(10000);
              float brightness = state;
              if (brightness > id(daylight_attenuation)) {
                brightness = id(daylight_attenuation);
                ESP_LOGD(TAG, "clamped to daylight_attenuation=%.2f", brightness);
              }
              else if (brightness < (id(daylight_attenuation)*0.5)) {
                auto therm_ctrl = id(thermostat_air).make_call();
                float target_temp = id(thermostat_air).target_temperature;
                float actual_temp = (id(temperature_ceiling).state + id(temperature_ground).state) / 2.0;
                float diff = actual_temp-target_temp;
                ESP_LOGD(TAG, "target_temp=%.2f째C, actual_temp=%.2f째C, diff=%.2fK", target_temp, actual_temp, diff);
                if (diff > 0.0)
                  diff /= 3.0;
                else
                  diff /= 10.0;
                brightness = (id(daylight_attenuation)*0.5) - diff;
                ESP_LOGD(TAG, "0.5*daylight_attenuation=%.2f (%+.2f) => brightness=%.2f", id(daylight_attenuation)*0.5, diff*(-1.0), brightness);
                if (brightness <= 0.0) {
                  brightness = 0.001;
                }
              }
              daylight.set_brightness(brightness);
              daylight.perform();
            } else {
              ESP_LOGD(TAG, "Temperature PID Controller nighttime heatlamp write_action: %.3f", state);
              auto heatlamp = id(heat_lamp).make_call();
              heatlamp.set_state(!!state);
              heatlamp.set_brightness(state ? state : 0.001);
              heatlamp.perform();
            }

light:
  - platform: monochromatic
    id: day_light
    output: dimmer1
    name: "Dimmer Daylight"
    gamma_correct: 1.0
    default_transition_length: 0s

  - platform: monochromatic
    id: heat_lamp
    output: heat_lamp_pwm
    name: "Heat Lamp"

  - platform: rgb
    name: "Scenic Light"
    id: scenic_light
    red: component_red
    green: component_green
    blue: component_blue
    effects:
      - lambda:
          name: Lightning
          update_interval: 50ms
          lambda: |-
            static bool flashing = true;
            static uint8_t r = 0;
            auto call = id(scenic_light).make_call();
            if (r == 0) {
              call.set_rgb(1.,1.,1.);
              call.perform();
            }
            r = random(1,100);
            if (r > 95) {
              call.set_transition_length(5);
              call.set_brightness(1.0);
              call.perform();
              flashing = true;
            } else if (flashing) {
              call.set_transition_length(300);
              call.set_brightness(0.01);
              call.perform();
              flashing = false;
            }

fan:
  - platform: speed
    id: fan_speed
    output: fan_pwm
    name: "Ventilation"
    speed_count: 100

i2c:
  sda: 25
  scl: 26
  scan: True
  id: bus_a

dallas:
  - pin: 22
    update_interval: 5min

sensor:
  - platform: hx711
    name: "Scale"
    dout_pin: 34
    clk_pin: 13
    gain: 128
    update_interval: 15s
    accuracy_decimals: 2
    unit_of_measurement: g
    filters:
      - calibrate_linear:
          - 250000 -> 0
          - 456666 -> 100
      - delta: 0.5
      - lambda: |-
            if (x < 0)
              return {};
            if (x < 2.5)
              return 0.0;
            return x;

  - platform: dallas
    address: !secret DsAddressHeatBed
    name: "Temperature HeatBed"
    unit_of_measurement: "째C"
    id: temperature_heatbed

  - platform: dallas
    address: !secret DsAddressSubstrate
    name: "Temperature Substrate"
    unit_of_measurement: "째C"
    id: temperature_substrate

  - platform: bme280
    temperature:
      name: "Ceiling Temperature"
      oversampling: 16x
      id: temperature_ceiling
      filters:
        - lambda: |-
            if (x > 0 && x < 60)
              return x;
            return {};
    pressure:
      name: "Air Pressure"
    humidity:
      name: "Ceiling Humidity"
      id: humidity_ceiling
      filters:
        - filter_out: 100
        - filter_out: 0
    address: 0x76
    update_interval: 15s

  - platform: sht3xd
    temperature:
      name: "Ground Temperature"
      id: temperature_ground
      filters:
        - lambda: |-
            if (x > 0 && x < 60)
              return x;
            return {};
    humidity:
      name: "Ground Humidity"
      id: humidity_ground
    address: 0x44
    update_interval: 20s

  - platform: pulse_counter
    name: "Fan Tacho"
    pin: 35
    unit_of_measurement: rpm
    update_interval: 60s
    filters:
      multiply: 0.5

  - platform: sun
    name: Sun Elevation
    type: elevation

  - platform: homeassistant   # actual historic temperature
    id: weather_temperature
    entity_id: sensor.temperature_in_france_noumea_182_days_ago
    on_value:
      then:
        - climate.control:
              id: thermostat_air
              target_temperature: !lambda |-
                return x;

  - platform: homeassistant   # actual historic humidity
    id: weather_humidity
    entity_id: sensor.humidity_in_france_noumea_182_days_ago
    on_value:
      then:
        - climate.control:
              id: humidity_control
              target_temperature: !lambda |-
                return x-1;

  - platform: homeassistant   # actual historic rain intensity (range 0-5)
    id: weather_precipitation
    entity_id: sensor.rain_in_france_noumea_182_days_ago
    on_value:
      then:
        - output.set_level:
            id: rain_pump_float
            level: !lambda |-
                return x/5.0;

  # actual historic sky conditions
  # a numeric value in the range of (0-22) which indicates increasing sky covering
  # we're going to interpret it as a correction factor for the daylight intensitiy,
  # the higher the value, the more daylight will be dimmed down
  - platform: homeassistant
    id: weather_sky
    entity_id: sensor.sky_in_france_noumea_182_days_ago
    on_value:
      then:
        - lambda: |-
            ESP_LOGD(TAG, "sky value changed to: %.0f", x);
            auto sceniclight = id(scenic_light).make_call();
            if (x == 30) {
              auto daylight = id(day_light).make_call();
              daylight.set_brightness(0.01);
              daylight.set_state(false);
              daylight.perform();
              sceniclight.set_state(true);
              sceniclight.set_effect("Lightning");
              sceniclight.perform();
              return;
            } else if (id(scenic_light)->get_effect_name() == "Lightning") {
              sceniclight.set_effect("None");
              if (id(is_daytime)) {
                auto daylight = id(day_light).make_call();
                daylight.set_state(true);
                daylight.perform();
              }
            }
            if (id(is_daytime)) {
              float b, dim_factor;
              id(scenic_light).current_values_as_brightness(&b);
              ESP_LOGD(TAG, "previous attenuated brightness: %f", b);
              b /= id(daylight_attenuation);
              ESP_LOGD(TAG, "previous normalized brightness: %f", b);
              id(daylight_attenuation) = id(daylight_max) * (24-x)/24;
              b *= id(daylight_attenuation);
              ESP_LOGD(TAG, "daylight_attenuation: %f", id(daylight_attenuation));
              ESP_LOGD(TAG, "target_brightness: %f", b);
              sceniclight.set_transition_length(60*1000);
              sceniclight.set_brightness(b);
              sceniclight.perform();
            }

  - platform: homeassistant
    id: moon
    entity_id: sensor.moon_in_france_noumea_182_days_ago
    on_value:
      then:
        - lambda: |-
            std::string effect = id(scenic_light)->get_effect_name();
            if (id(is_daytime) == false && effect == "None") {
              auto call = id(scenic_light).make_call();
              float attenuated_moonlight = (x/2.0 + x/2.0*(id(daylight_attenuation)/id(daylight_max)))/100.0 + 0.01;
              call.set_brightness(attenuated_moonlight);
              call.set_state(x > 0.0 ? true : false);
              call.perform();
            }

  - platform: template
    name: "Combined humidity"
    id: humidity_combined
    update_interval: 15s
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return (id(humidity_ceiling).state + id(humidity_ground).state) / 2.0;

time:
  - platform: homeassistant
    id: esptime
    on_time_sync:
      then:
        - lambda: |-
              auto ts = id(esptime).now();
              ESPTime remote_ts = time::ESPTime::from_epoch_utc(ts.timestamp - 182*24*60*60);
              char datetimestr[21];
              remote_ts.strftime(datetimestr, 20, "%Y-%m-%d %H:%M:%S");
              ESP_LOGD(TAG, "offset timestamp: %s", datetimestr);
              id(remote_time).set_epoch_time(ts.timestamp - 182*24*60*60);

  - platform: homeassistant
    id: remote_time
    timezone: Pacific/Noumea
    on_time_sync:
      then:
        - logger.log: "Synchronized remote_time"
        - lambda: |-
              auto ts = id(remote_time).now();
              ESPTime remote_ts = time::ESPTime::from_epoch_utc(ts.timestamp);
              char datetimestr[21];
              remote_ts.strftime(datetimestr, 20, "%Y-%m-%d %H:%M:%S");
              ESP_LOGD(TAG, "remote_time timestamp = %s", datetimestr);

sun:
  id: remote_sun
  time_id: remote_time
  #latitude: -22.6
  #longitude: 167.5
  # Take original Noumea / Nouvelle-Cal챕donie latitude
  # but mirror it to the northern hemisphere
  # and use actual local longitude
  latitude: 22.6
  longitude: 9.15

  on_sunrise:
    - elevation: 20째
      then:
        - lambda: |-
              auto call = id(scenic_light).turn_on();
              call.set_effect("Sunrise Color");
              call.perform();
              auto call2 = id(day_light).turn_on();
              call2.set_effect("Sunrise Daylight");
              call2.perform();
        - logger.log: Good morning, Gecko.

  on_sunset:
    - elevation: 44째
      then:
        - lambda: |-
              auto call = id(day_light).make_call();
              call.set_effect("Sunset Daylight");
              call.perform();
    - elevation: 5째
      then:
        - logger.log: Good night, Gecko.
        - lambda: |-
              auto call = id(scenic_light).turn_on();
              call.set_effect("Sunset Color");
              call.perform();

climate:
  - platform: pid
    id: thermostat_air
    name: "Thermostat Air Temp"
    sensor: temperature_ceiling
    default_target_temperature: 22 째C
    heat_output: heater
    cool_output: fan_cooler
    visual:
      min_temperature: 12
      max_temperature: 36
    control_parameters:
      kp: 2.34544
      ki: 0.00987
      kd: 208.97874

  - platform: pid
    id: humidity_control
    name: "Humidity"
    sensor: humidity_combined
    default_target_temperature: 70 째C
    heat_output: fogger_humidifier
    cool_output: fan_dehumidifier
    visual:
      min_temperature: 30
      max_temperature: 100
      temperature_step: 2
    control_parameters:
      kp: 0.22
      ki: 0.005
      kd: 6.38

globals:
   - id: scenic_light_effect
     type: uint8_t
     restore_value: no
     initial_value: '0'

   - id: daylight_max
     type: float
     restore_value: no
     initial_value: '0.75'

   - id: daylight_attenuation
     type: float
     restore_value: no
     initial_value: '0.7'

   - id: is_daytime
     type: bool
     restore_value: yes
     initial_value: 'false'

status_led:
  pin: GPIO12
